//Hashmap and DLL
class LRUCache {
public:
    struct node {
        public:
            node* next;
            node* prev;
            int key;
            int val;
            node(int key, int val) {
                this->key=key;
                this->val=val;
            }
    };
    
    node* head=new node(-1,-1);
    node* tail=new node(-1,-1);
    int cap;
    unordered_map<int, node*> mp;
        
    LRUCache(int capacity) {
        
        cap=capacity;
        head->next=tail;
        tail->prev=head;
    }
    
    void addnode(node* nwnode) {
        
        node *temp=head->next;
        nwnode->next=temp;
        nwnode->prev=head;
        head->next=nwnode;
        temp->prev=nwnode;
    }
    
    void deletenode(node* delnode) {
        
        node* delprev=delnode->prev;
        node* delnext=delnode->next;
        delnext->prev=delprev;
        delprev->next=delnext;
        //delete (delnode);
    }
    
    int get(int key) {
        
        if(mp.find(key)!=mp.end()) {
            node* resnode=mp[key];
            int res=resnode->val;
            mp.erase(key);
            deletenode(resnode);
            //node* nwnode=new node(key,res); we can create a new node too here
            addnode(resnode);
            mp[key]=head->next;
            return res;
        }
        return -1;   
    }
    
    void put(int key, int value) {
        if(mp.find(key)!=mp.end()) {
            node* existnode=mp[key];
            mp.erase(key);
            deletenode(existnode);
        }
        if(mp.size()==cap) {
            mp.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addnode(new node(key,value));
        mp[key]=head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */