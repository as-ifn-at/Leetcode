class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size(), n=grid[0].size();
        int tot=0;
        queue<pair<int,int>> rot;
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j]!=0) 
                    tot++;
                if(grid[i][j]==2)    
                    rot.push({i,j});
            }
        }
        
        int days=0,k=0;
        int dx[4]={0,0,1,-1};
        int dy[4]={1,-1,0,0};
        
        while(!rot.empty()) {
            
            int f=rot.size();
            k+=f;
            while(f--) {
                
                int x=rot.front().first, y=rot.front().second;
                rot.pop();
                for(int i=0; i<4; i++){
                    int nx=x+dx[i], ny=y+dy[i];
                    if(nx>=0 && ny>=0 && nx<m && ny<n && grid[nx][ny]==1) {
                        rot.push({nx,ny});
                        grid[nx][ny]=2;
                    }
                }
            }
            if(!rot.empty())
                days++;
        }
        return tot==k ? days:-1;
    }
};